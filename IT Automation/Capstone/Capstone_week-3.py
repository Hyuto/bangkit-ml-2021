#!/usr/bin/env python3

import json
import locale
import sys
import emails
import os
import reports


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    car_model = {}
    car_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # Handle max sales
        if format_car(item['car']) in car_model:
            car_model[format_car(item['car'])] += item["total_sales"]
        else:
            car_model[format_car(item['car'])] = item["total_sales"]
        # Handle most popular car_year
        if item['car']['car_year'] in car_year:
            car_year[item['car']['car_year']] += item["total_sales"]
        else:
            car_year[item['car']['car_year']] = item["total_sales"]

    car_model = list(sorted(car_model.items(), key = lambda x : x[1], reverse = True))[0]
    car_year = list(sorted(car_year.items(), key = lambda x : x[1], reverse = True))[0]
    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]
        ),
        "The {} had the most sales: {}".format(
            car_model[0], car_model[1]
        ),
        "The most popular year was {} with {} sales.".format(
            car_year[0], car_year[1]
        )
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # PDF report
    table_data = [['ID', 'Car', 'Price', 'Total Sales']]
    for item in data:
        table_data.append([item['id'], format_car(item['car']), 
        locale.atof(item["price"].strip("$")), item['total_sales']])

    reports.generate("/tmp/cars.pdf", "Salles summary for last month", '<br/>'.join(summary), table_data)
    
    # Send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = '\n'.join(summary)
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)

if __name__ == "__main__":
    main(sys.argv)